{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","position","setPosition","message","setMessage","success","pos","crd","coords","errors","err","code","useEffect","a","navigator","geolocation","permissions","query","name","result","state","getCurrentPosition","options","enableHighAccuracy","timeout","maximumAge","getPosition","latitude","longitude","accuracy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAqDeA,EAnDH,WAAO,IAAD,EACgBC,qBADhB,mBACTC,EADS,KACCC,EADD,OAEcF,mBAAS,oBAFvB,mBAETG,EAFS,KAEAC,EAFA,KAIVC,EAAU,SAACC,GACf,IAAIC,EAAMD,EAAIE,OACdN,EAAYK,IAGRE,EAAS,SAACC,GACdN,EAAW,SAAD,OAAUM,EAAIC,KAAd,cAAwBD,EAAIP,WAyBxC,OAtBAS,qBAAU,YACS,uCAAG,8BAAAC,EAAA,yDACbC,UAAUC,YADG,uBAEhBX,EAAW,mCAFK,0CAKGU,UAAUE,YAAYC,MAAM,CAAEC,KAAM,gBALvC,OAKZC,EALY,OAMlBf,EAAW,kBAAD,OAAmBe,EAAOC,QACf,YAAjBD,EAAOC,MACTN,UAAUC,YAAYM,mBAAmBhB,GACf,WAAjBc,EAAOC,QACVE,EAAU,CACdC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,GAEdX,UAAUC,YAAYM,mBAAmBhB,EAASI,EAAQa,IAf1C,2CAAH,qDAkBjBI,KACC,IAGD,gCACE,6CACA,0CAAavB,KACZF,GACC,gCACE,4DACA,6CAAgBA,EAAS0B,YACzB,8CAAiB1B,EAAS2B,aAC1B,6CAAgB3B,EAAS4B,SAAzB,oBClCKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fb0004c1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst App = () => {\n  const [position, setPosition] = useState();\n  const [message, setMessage] = useState('initializing app');\n\n  const success = (pos) => {\n    var crd = pos.coords;\n    setPosition(crd);\n  };\n\n  const errors = (err) => {\n    setMessage(`ERROR(${err.code}): ${err.message}`);\n  };\n\n  useEffect(() => {\n    const getPosition = async () => {\n      if (!navigator.geolocation) {\n        setMessage('navigator.geolocation not found');\n        return;\n      }\n      const result = await navigator.permissions.query({ name: 'geolocation' });\n      setMessage(`result.state = ${result.state}`);\n      if (result.state === 'granted') {\n        navigator.geolocation.getCurrentPosition(success);\n      } else if (result.state === 'prompt') {\n        const options = {\n          enableHighAccuracy: true,\n          timeout: 5000,\n          maximumAge: 0,\n        };\n        navigator.geolocation.getCurrentPosition(success, errors, options);\n      }\n    };\n    getPosition();\n  }, []);\n\n  return (\n    <div>\n      <h2>GeoLocation</h2>\n      <p>message: {message}</p>\n      {position && (\n        <div>\n          <div>Your current position is:</div>\n          <div>Latitude: {position.latitude}</div>\n          <div>Longitude: {position.longitude}</div>\n          <div>Accuracy: {position.accuracy} meters</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}